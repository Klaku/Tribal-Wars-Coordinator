/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ToolsRouteImport } from './routes/tools'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ToolsUsersRouteImport } from './routes/tools/users'
import { Route as ToolsRecruitmentRouteImport } from './routes/tools/recruitment'
import { Route as ToolsProfileRouteImport } from './routes/tools/profile'
import { Route as ToolsOperationsRouteImport } from './routes/tools/operations'

const ToolsRoute = ToolsRouteImport.update({
  id: '/tools',
  path: '/tools',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ToolsUsersRoute = ToolsUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => ToolsRoute,
} as any)
const ToolsRecruitmentRoute = ToolsRecruitmentRouteImport.update({
  id: '/recruitment',
  path: '/recruitment',
  getParentRoute: () => ToolsRoute,
} as any)
const ToolsProfileRoute = ToolsProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => ToolsRoute,
} as any)
const ToolsOperationsRoute = ToolsOperationsRouteImport.update({
  id: '/operations',
  path: '/operations',
  getParentRoute: () => ToolsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/tools': typeof ToolsRouteWithChildren
  '/tools/operations': typeof ToolsOperationsRoute
  '/tools/profile': typeof ToolsProfileRoute
  '/tools/recruitment': typeof ToolsRecruitmentRoute
  '/tools/users': typeof ToolsUsersRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/tools': typeof ToolsRouteWithChildren
  '/tools/operations': typeof ToolsOperationsRoute
  '/tools/profile': typeof ToolsProfileRoute
  '/tools/recruitment': typeof ToolsRecruitmentRoute
  '/tools/users': typeof ToolsUsersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/tools': typeof ToolsRouteWithChildren
  '/tools/operations': typeof ToolsOperationsRoute
  '/tools/profile': typeof ToolsProfileRoute
  '/tools/recruitment': typeof ToolsRecruitmentRoute
  '/tools/users': typeof ToolsUsersRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/tools'
    | '/tools/operations'
    | '/tools/profile'
    | '/tools/recruitment'
    | '/tools/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/tools'
    | '/tools/operations'
    | '/tools/profile'
    | '/tools/recruitment'
    | '/tools/users'
  id:
    | '__root__'
    | '/'
    | '/tools'
    | '/tools/operations'
    | '/tools/profile'
    | '/tools/recruitment'
    | '/tools/users'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ToolsRoute: typeof ToolsRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tools': {
      id: '/tools'
      path: '/tools'
      fullPath: '/tools'
      preLoaderRoute: typeof ToolsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tools/users': {
      id: '/tools/users'
      path: '/users'
      fullPath: '/tools/users'
      preLoaderRoute: typeof ToolsUsersRouteImport
      parentRoute: typeof ToolsRoute
    }
    '/tools/recruitment': {
      id: '/tools/recruitment'
      path: '/recruitment'
      fullPath: '/tools/recruitment'
      preLoaderRoute: typeof ToolsRecruitmentRouteImport
      parentRoute: typeof ToolsRoute
    }
    '/tools/profile': {
      id: '/tools/profile'
      path: '/profile'
      fullPath: '/tools/profile'
      preLoaderRoute: typeof ToolsProfileRouteImport
      parentRoute: typeof ToolsRoute
    }
    '/tools/operations': {
      id: '/tools/operations'
      path: '/operations'
      fullPath: '/tools/operations'
      preLoaderRoute: typeof ToolsOperationsRouteImport
      parentRoute: typeof ToolsRoute
    }
  }
}

interface ToolsRouteChildren {
  ToolsOperationsRoute: typeof ToolsOperationsRoute
  ToolsProfileRoute: typeof ToolsProfileRoute
  ToolsRecruitmentRoute: typeof ToolsRecruitmentRoute
  ToolsUsersRoute: typeof ToolsUsersRoute
}

const ToolsRouteChildren: ToolsRouteChildren = {
  ToolsOperationsRoute: ToolsOperationsRoute,
  ToolsProfileRoute: ToolsProfileRoute,
  ToolsRecruitmentRoute: ToolsRecruitmentRoute,
  ToolsUsersRoute: ToolsUsersRoute,
}

const ToolsRouteWithChildren = ToolsRoute._addFileChildren(ToolsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ToolsRoute: ToolsRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
